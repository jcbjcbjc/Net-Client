// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace C2BNet {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class C2BNetMessage {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_C2BNet_C2BNetMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessage, global::C2BNet.C2BNetMessage.Builder> internal__static_C2BNet_C2BNetMessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_C2BNetMessageRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessageRequest, global::C2BNet.C2BNetMessageRequest.Builder> internal__static_C2BNet_C2BNetMessageRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_C2BNetMessageResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessageResponse, global::C2BNet.C2BNetMessageResponse.Builder> internal__static_C2BNet_C2BNetMessageResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_HeartBeatRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.HeartBeatRequest, global::C2BNet.HeartBeatRequest.Builder> internal__static_C2BNet_HeartBeatRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_HeartBeatResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.HeartBeatResponse, global::C2BNet.HeartBeatResponse.Builder> internal__static_C2BNet_HeartBeatResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_FrameHandle__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandle, global::C2BNet.FrameHandle.Builder> internal__static_C2BNet_FrameHandle__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_FrameHandleResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandleResponse, global::C2BNet.FrameHandleResponse.Builder> internal__static_C2BNet_FrameHandleResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_FrameHandlesFromClient__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandlesFromClient, global::C2BNet.FrameHandlesFromClient.Builder> internal__static_C2BNet_FrameHandlesFromClient__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_PercentForward__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.PercentForward, global::C2BNet.PercentForward.Builder> internal__static_C2BNet_PercentForward__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_PercentForwardResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.PercentForwardResponse, global::C2BNet.PercentForwardResponse.Builder> internal__static_C2BNet_PercentForwardResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_GameOverRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.GameOverRequest, global::C2BNet.GameOverRequest.Builder> internal__static_C2BNet_GameOverRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_RepairFrameRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrameRequest, global::C2BNet.RepairFrameRequest.Builder> internal__static_C2BNet_RepairFrameRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_RepairFrameResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrameResponse, global::C2BNet.RepairFrameResponse.Builder> internal__static_C2BNet_RepairFrameResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_RepairFrame__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrame, global::C2BNet.RepairFrame.Builder> internal__static_C2BNet_RepairFrame__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_C2BNet_LiveFrameResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::C2BNet.LiveFrameResponse, global::C2BNet.LiveFrameResponse.Builder> internal__static_C2BNet_LiveFrameResponse__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static C2BNetMessage() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChNDMkJOZXRNZXNzYWdlLnByb3RvEgZDMkJOZXQihAEKDUMyQk5ldE1lc3Nh", 
              "Z2USEwoLbWVzc2FnZVR5cGUYASADKAkSLQoHUmVxdWVzdBgCIAEoCzIcLkMy", 
              "Qk5ldC5DMkJOZXRNZXNzYWdlUmVxdWVzdBIvCghSZXNwb25zZRgDIAEoCzId", 
              "LkMyQk5ldC5DMkJOZXRNZXNzYWdlUmVzcG9uc2UiogIKFEMyQk5ldE1lc3Nh", 
              "Z2VSZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoBRI0CgxmcmFtZUhhbmRsZXMYAiAB", 
              "KAsyHi5DMkJOZXQuRnJhbWVIYW5kbGVzRnJvbUNsaWVudBIuCg5wZXJjZW50", 
              "Rm9yd2FyZBgDIAEoCzIWLkMyQk5ldC5QZXJjZW50Rm9yd2FyZBIsCgtnYW1l", 
              "T3ZlclJlcRgEIAEoCzIXLkMyQk5ldC5HYW1lT3ZlclJlcXVlc3QSMgoOcmVw", 
              "YWlyRnJhbWVSZXEYBSABKAsyGi5DMkJOZXQuUmVwYWlyRnJhbWVSZXF1ZXN0", 
              "EjIKEGhlYXJ0QmVhdFJlcXVlc3QYBiABKAsyGC5DMkJOZXQuSGVhcnRCZWF0", 
              "UmVxdWVzdCKeAgoVQzJCTmV0TWVzc2FnZVJlc3BvbnNlEjMKDmZyYW1lSGFu", 
              "ZGxlUmVzGAEgASgLMhsuQzJCTmV0LkZyYW1lSGFuZGxlUmVzcG9uc2USOQoR", 
              "cGVyY2VudEZvcndhcmRSZXMYAiABKAsyHi5DMkJOZXQuUGVyY2VudEZvcndh", 
              "cmRSZXNwb25zZRIzCg5yZXBhaXJGcmFtZVJlcxgDIAEoCzIbLkMyQk5ldC5S", 
              "ZXBhaXJGcmFtZVJlc3BvbnNlEi8KDGxpdmVGcmFtZVJlcxgEIAEoCzIZLkMy", 
              "Qk5ldC5MaXZlRnJhbWVSZXNwb25zZRIvCgxoZWFydEJlYXRSZXMYBSABKAsy", 
              "GS5DMkJOZXQuSGVhcnRCZWF0UmVzcG9uc2UiEgoQSGVhcnRCZWF0UmVxdWVz", 
              "dCITChFIZWFydEJlYXRSZXNwb25zZSJ3CgtGcmFtZUhhbmRsZRIOCgZ1c2Vy", 
              "SWQYASABKAUSCwoDb3B0GAIgASgFEhIKCk9wcmV0aW9uSWQYAyABKAUSEQoJ", 
              "b3B0VmFsdWUxGAQgASgFEhEKCW9wdFZhbHVlMhgFIAEoBRIRCglvcHREZXRh", 
              "aWwYBiADKAQiTwoTRnJhbWVIYW5kbGVSZXNwb25zZRINCgVmcmFtZRgBIAEo", 
              "BRIpCgxmcmFtZUhhbmRsZXMYAiADKAsyEy5DMkJOZXQuRnJhbWVIYW5kbGUi", 
              "UwoWRnJhbWVIYW5kbGVzRnJvbUNsaWVudBIOCgZ1c2VySWQYASABKAUSKQoM", 
              "ZnJhbWVIYW5kbGVzGAIgAygLMhMuQzJCTmV0LkZyYW1lSGFuZGxlIjEKDlBl", 
              "cmNlbnRGb3J3YXJkEg4KBnVzZXJJZBgBIAEoBRIPCgdwZXJjZW50GAIgASgF", 
              "ImMKFlBlcmNlbnRGb3J3YXJkUmVzcG9uc2USLgoOcGVyY2VudEZvcndhcmQY", 
              "ASABKAsyFi5DMkJOZXQuUGVyY2VudEZvcndhcmQSGQoRYWxsVXNlckxvYWRT", 
              "dWNlc3MYAiABKAgiEQoPR2FtZU92ZXJSZXF1ZXN0IjoKElJlcGFpckZyYW1l", 
              "UmVxdWVzdBISCgpzdGFydEZyYW1lGAEgASgFEhAKCGVuZEZyYW1lGAIgASgF", 
              "IkAKE1JlcGFpckZyYW1lUmVzcG9uc2USKQoMcmVwYWlyRnJhbWVzGAEgAygL", 
              "MhMuQzJCTmV0LlJlcGFpckZyYW1lIkcKC1JlcGFpckZyYW1lEg0KBWZyYW1l", 
              "GAEgASgFEikKDGZyYW1lSGFuZGxlcxgCIAMoCzITLkMyQk5ldC5GcmFtZUhh", 
              "bmRsZSI8ChFMaXZlRnJhbWVSZXNwb25zZRInCgpsaXZlRnJhbWVzGAEgAygL", 
            "MhMuQzJCTmV0LlJlcGFpckZyYW1lQgJIAQ=="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_C2BNet_C2BNetMessage__Descriptor = Descriptor.MessageTypes[0];
          internal__static_C2BNet_C2BNetMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessage, global::C2BNet.C2BNetMessage.Builder>(internal__static_C2BNet_C2BNetMessage__Descriptor,
                  new string[] { "MessageType", "Request", "Response", });
          internal__static_C2BNet_C2BNetMessageRequest__Descriptor = Descriptor.MessageTypes[1];
          internal__static_C2BNet_C2BNetMessageRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessageRequest, global::C2BNet.C2BNetMessageRequest.Builder>(internal__static_C2BNet_C2BNetMessageRequest__Descriptor,
                  new string[] { "UserId", "FrameHandles", "PercentForward", "GameOverReq", "RepairFrameReq", "HeartBeatRequest", });
          internal__static_C2BNet_C2BNetMessageResponse__Descriptor = Descriptor.MessageTypes[2];
          internal__static_C2BNet_C2BNetMessageResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.C2BNetMessageResponse, global::C2BNet.C2BNetMessageResponse.Builder>(internal__static_C2BNet_C2BNetMessageResponse__Descriptor,
                  new string[] { "FrameHandleRes", "PercentForwardRes", "RepairFrameRes", "LiveFrameRes", "HeartBeatRes", });
          internal__static_C2BNet_HeartBeatRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_C2BNet_HeartBeatRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.HeartBeatRequest, global::C2BNet.HeartBeatRequest.Builder>(internal__static_C2BNet_HeartBeatRequest__Descriptor,
                  new string[] { });
          internal__static_C2BNet_HeartBeatResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_C2BNet_HeartBeatResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.HeartBeatResponse, global::C2BNet.HeartBeatResponse.Builder>(internal__static_C2BNet_HeartBeatResponse__Descriptor,
                  new string[] { });
          internal__static_C2BNet_FrameHandle__Descriptor = Descriptor.MessageTypes[5];
          internal__static_C2BNet_FrameHandle__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandle, global::C2BNet.FrameHandle.Builder>(internal__static_C2BNet_FrameHandle__Descriptor,
                  new string[] { "UserId", "Opt", "OpretionId", "OptValue1", "OptValue2", "OptDetail", });
          internal__static_C2BNet_FrameHandleResponse__Descriptor = Descriptor.MessageTypes[6];
          internal__static_C2BNet_FrameHandleResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandleResponse, global::C2BNet.FrameHandleResponse.Builder>(internal__static_C2BNet_FrameHandleResponse__Descriptor,
                  new string[] { "Frame", "FrameHandles", });
          internal__static_C2BNet_FrameHandlesFromClient__Descriptor = Descriptor.MessageTypes[7];
          internal__static_C2BNet_FrameHandlesFromClient__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.FrameHandlesFromClient, global::C2BNet.FrameHandlesFromClient.Builder>(internal__static_C2BNet_FrameHandlesFromClient__Descriptor,
                  new string[] { "UserId", "FrameHandles", });
          internal__static_C2BNet_PercentForward__Descriptor = Descriptor.MessageTypes[8];
          internal__static_C2BNet_PercentForward__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.PercentForward, global::C2BNet.PercentForward.Builder>(internal__static_C2BNet_PercentForward__Descriptor,
                  new string[] { "UserId", "Percent", });
          internal__static_C2BNet_PercentForwardResponse__Descriptor = Descriptor.MessageTypes[9];
          internal__static_C2BNet_PercentForwardResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.PercentForwardResponse, global::C2BNet.PercentForwardResponse.Builder>(internal__static_C2BNet_PercentForwardResponse__Descriptor,
                  new string[] { "PercentForward", "AllUserLoadSucess", });
          internal__static_C2BNet_GameOverRequest__Descriptor = Descriptor.MessageTypes[10];
          internal__static_C2BNet_GameOverRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.GameOverRequest, global::C2BNet.GameOverRequest.Builder>(internal__static_C2BNet_GameOverRequest__Descriptor,
                  new string[] { });
          internal__static_C2BNet_RepairFrameRequest__Descriptor = Descriptor.MessageTypes[11];
          internal__static_C2BNet_RepairFrameRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrameRequest, global::C2BNet.RepairFrameRequest.Builder>(internal__static_C2BNet_RepairFrameRequest__Descriptor,
                  new string[] { "StartFrame", "EndFrame", });
          internal__static_C2BNet_RepairFrameResponse__Descriptor = Descriptor.MessageTypes[12];
          internal__static_C2BNet_RepairFrameResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrameResponse, global::C2BNet.RepairFrameResponse.Builder>(internal__static_C2BNet_RepairFrameResponse__Descriptor,
                  new string[] { "RepairFrames", });
          internal__static_C2BNet_RepairFrame__Descriptor = Descriptor.MessageTypes[13];
          internal__static_C2BNet_RepairFrame__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.RepairFrame, global::C2BNet.RepairFrame.Builder>(internal__static_C2BNet_RepairFrame__Descriptor,
                  new string[] { "Frame", "FrameHandles", });
          internal__static_C2BNet_LiveFrameResponse__Descriptor = Descriptor.MessageTypes[14];
          internal__static_C2BNet_LiveFrameResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::C2BNet.LiveFrameResponse, global::C2BNet.LiveFrameResponse.Builder>(internal__static_C2BNet_LiveFrameResponse__Descriptor,
                  new string[] { "LiveFrames", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2BNetMessage : pb::GeneratedMessage<C2BNetMessage, C2BNetMessage.Builder> {
    private C2BNetMessage() { }
    private static readonly C2BNetMessage defaultInstance = new C2BNetMessage().MakeReadOnly();
    private static readonly string[] _c2BNetMessageFieldNames = new string[] { "Request", "Response", "messageType" };
    private static readonly uint[] _c2BNetMessageFieldTags = new uint[] { 18, 26, 10 };
    public static C2BNetMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2BNetMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2BNetMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2BNetMessage, C2BNetMessage.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessage__FieldAccessorTable; }
    }
    
    public const int MessageTypeFieldNumber = 1;
    private pbc::PopsicleList<string> messageType_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MessageTypeList {
      get { return pbc::Lists.AsReadOnly(messageType_); }
    }
    public int MessageTypeCount {
      get { return messageType_.Count; }
    }
    public string GetMessageType(int index) {
      return messageType_[index];
    }
    
    public const int RequestFieldNumber = 2;
    private bool hasRequest;
    private global::C2BNet.C2BNetMessageRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::C2BNet.C2BNetMessageRequest Request {
      get { return request_ ?? global::C2BNet.C2BNetMessageRequest.DefaultInstance; }
    }
    
    public const int ResponseFieldNumber = 3;
    private bool hasResponse;
    private global::C2BNet.C2BNetMessageResponse response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::C2BNet.C2BNetMessageResponse Response {
      get { return response_ ?? global::C2BNet.C2BNetMessageResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2BNetMessageFieldNames;
      if (messageType_.Count > 0) {
        output.WriteStringArray(1, field_names[2], messageType_);
      }
      if (hasRequest) {
        output.WriteMessage(2, field_names[0], Request);
      }
      if (hasResponse) {
        output.WriteMessage(3, field_names[1], Response);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (string element in MessageTypeList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * messageType_.Count;
      }
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Request);
      }
      if (hasResponse) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Response);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2BNetMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2BNetMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2BNetMessage MakeReadOnly() {
      messageType_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2BNetMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2BNetMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2BNetMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2BNetMessage result;
      
      private C2BNetMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          C2BNetMessage original = result;
          result = new C2BNetMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2BNetMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.C2BNetMessage.Descriptor; }
      }
      
      public override C2BNetMessage DefaultInstanceForType {
        get { return global::C2BNet.C2BNetMessage.DefaultInstance; }
      }
      
      public override C2BNetMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2BNetMessage) {
          return MergeFrom((C2BNetMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2BNetMessage other) {
        if (other == global::C2BNet.C2BNetMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.messageType_.Count != 0) {
          result.messageType_.Add(other.messageType_);
        }
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2BNetMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2BNetMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.messageType_);
              break;
            }
            case 18: {
              global::C2BNet.C2BNetMessageRequest.Builder subBuilder = global::C2BNet.C2BNetMessageRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::C2BNet.C2BNetMessageResponse.Builder subBuilder = global::C2BNet.C2BNetMessageResponse.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> MessageTypeList {
        get { return PrepareBuilder().messageType_; }
      }
      public int MessageTypeCount {
        get { return result.MessageTypeCount; }
      }
      public string GetMessageType(int index) {
        return result.GetMessageType(index);
      }
      public Builder SetMessageType(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.messageType_[index] = value;
        return this;
      }
      public Builder AddMessageType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.messageType_.Add(value);
        return this;
      }
      public Builder AddRangeMessageType(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.messageType_.Add(values);
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.messageType_.Clear();
        return this;
      }
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::C2BNet.C2BNetMessageRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::C2BNet.C2BNetMessageRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::C2BNet.C2BNetMessageRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::C2BNet.C2BNetMessageRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::C2BNet.C2BNetMessageRequest.DefaultInstance) {
            result.request_ = global::C2BNet.C2BNetMessageRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::C2BNet.C2BNetMessageResponse Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::C2BNet.C2BNetMessageResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::C2BNet.C2BNetMessageResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::C2BNet.C2BNetMessageResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::C2BNet.C2BNetMessageResponse.DefaultInstance) {
            result.response_ = global::C2BNet.C2BNetMessageResponse.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
    }
    static C2BNetMessage() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2BNetMessageRequest : pb::GeneratedMessage<C2BNetMessageRequest, C2BNetMessageRequest.Builder> {
    private C2BNetMessageRequest() { }
    private static readonly C2BNetMessageRequest defaultInstance = new C2BNetMessageRequest().MakeReadOnly();
    private static readonly string[] _c2BNetMessageRequestFieldNames = new string[] { "frameHandles", "gameOverReq", "heartBeatRequest", "percentForward", "repairFrameReq", "userId" };
    private static readonly uint[] _c2BNetMessageRequestFieldTags = new uint[] { 18, 34, 50, 26, 42, 8 };
    public static C2BNetMessageRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2BNetMessageRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2BNetMessageRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessageRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2BNetMessageRequest, C2BNetMessageRequest.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessageRequest__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int FrameHandlesFieldNumber = 2;
    private bool hasFrameHandles;
    private global::C2BNet.FrameHandlesFromClient frameHandles_;
    public bool HasFrameHandles {
      get { return hasFrameHandles; }
    }
    public global::C2BNet.FrameHandlesFromClient FrameHandles {
      get { return frameHandles_ ?? global::C2BNet.FrameHandlesFromClient.DefaultInstance; }
    }
    
    public const int PercentForwardFieldNumber = 3;
    private bool hasPercentForward;
    private global::C2BNet.PercentForward percentForward_;
    public bool HasPercentForward {
      get { return hasPercentForward; }
    }
    public global::C2BNet.PercentForward PercentForward {
      get { return percentForward_ ?? global::C2BNet.PercentForward.DefaultInstance; }
    }
    
    public const int GameOverReqFieldNumber = 4;
    private bool hasGameOverReq;
    private global::C2BNet.GameOverRequest gameOverReq_;
    public bool HasGameOverReq {
      get { return hasGameOverReq; }
    }
    public global::C2BNet.GameOverRequest GameOverReq {
      get { return gameOverReq_ ?? global::C2BNet.GameOverRequest.DefaultInstance; }
    }
    
    public const int RepairFrameReqFieldNumber = 5;
    private bool hasRepairFrameReq;
    private global::C2BNet.RepairFrameRequest repairFrameReq_;
    public bool HasRepairFrameReq {
      get { return hasRepairFrameReq; }
    }
    public global::C2BNet.RepairFrameRequest RepairFrameReq {
      get { return repairFrameReq_ ?? global::C2BNet.RepairFrameRequest.DefaultInstance; }
    }
    
    public const int HeartBeatRequestFieldNumber = 6;
    private bool hasHeartBeatRequest;
    private global::C2BNet.HeartBeatRequest heartBeatRequest_;
    public bool HasHeartBeatRequest {
      get { return hasHeartBeatRequest; }
    }
    public global::C2BNet.HeartBeatRequest HeartBeatRequest {
      get { return heartBeatRequest_ ?? global::C2BNet.HeartBeatRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2BNetMessageRequestFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[5], UserId);
      }
      if (hasFrameHandles) {
        output.WriteMessage(2, field_names[0], FrameHandles);
      }
      if (hasPercentForward) {
        output.WriteMessage(3, field_names[3], PercentForward);
      }
      if (hasGameOverReq) {
        output.WriteMessage(4, field_names[1], GameOverReq);
      }
      if (hasRepairFrameReq) {
        output.WriteMessage(5, field_names[4], RepairFrameReq);
      }
      if (hasHeartBeatRequest) {
        output.WriteMessage(6, field_names[2], HeartBeatRequest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      if (hasFrameHandles) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, FrameHandles);
      }
      if (hasPercentForward) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, PercentForward);
      }
      if (hasGameOverReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, GameOverReq);
      }
      if (hasRepairFrameReq) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, RepairFrameReq);
      }
      if (hasHeartBeatRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, HeartBeatRequest);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2BNetMessageRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2BNetMessageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessageRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2BNetMessageRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2BNetMessageRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2BNetMessageRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2BNetMessageRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2BNetMessageRequest result;
      
      private C2BNetMessageRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          C2BNetMessageRequest original = result;
          result = new C2BNetMessageRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2BNetMessageRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.C2BNetMessageRequest.Descriptor; }
      }
      
      public override C2BNetMessageRequest DefaultInstanceForType {
        get { return global::C2BNet.C2BNetMessageRequest.DefaultInstance; }
      }
      
      public override C2BNetMessageRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2BNetMessageRequest) {
          return MergeFrom((C2BNetMessageRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2BNetMessageRequest other) {
        if (other == global::C2BNet.C2BNetMessageRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasFrameHandles) {
          MergeFrameHandles(other.FrameHandles);
        }
        if (other.HasPercentForward) {
          MergePercentForward(other.PercentForward);
        }
        if (other.HasGameOverReq) {
          MergeGameOverReq(other.GameOverReq);
        }
        if (other.HasRepairFrameReq) {
          MergeRepairFrameReq(other.RepairFrameReq);
        }
        if (other.HasHeartBeatRequest) {
          MergeHeartBeatRequest(other.HeartBeatRequest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2BNetMessageRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2BNetMessageRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 18: {
              global::C2BNet.FrameHandlesFromClient.Builder subBuilder = global::C2BNet.FrameHandlesFromClient.CreateBuilder();
              if (result.hasFrameHandles) {
                subBuilder.MergeFrom(FrameHandles);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FrameHandles = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::C2BNet.PercentForward.Builder subBuilder = global::C2BNet.PercentForward.CreateBuilder();
              if (result.hasPercentForward) {
                subBuilder.MergeFrom(PercentForward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PercentForward = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::C2BNet.GameOverRequest.Builder subBuilder = global::C2BNet.GameOverRequest.CreateBuilder();
              if (result.hasGameOverReq) {
                subBuilder.MergeFrom(GameOverReq);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameOverReq = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::C2BNet.RepairFrameRequest.Builder subBuilder = global::C2BNet.RepairFrameRequest.CreateBuilder();
              if (result.hasRepairFrameReq) {
                subBuilder.MergeFrom(RepairFrameReq);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RepairFrameReq = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::C2BNet.HeartBeatRequest.Builder subBuilder = global::C2BNet.HeartBeatRequest.CreateBuilder();
              if (result.hasHeartBeatRequest) {
                subBuilder.MergeFrom(HeartBeatRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeartBeatRequest = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasFrameHandles {
       get { return result.hasFrameHandles; }
      }
      public global::C2BNet.FrameHandlesFromClient FrameHandles {
        get { return result.FrameHandles; }
        set { SetFrameHandles(value); }
      }
      public Builder SetFrameHandles(global::C2BNet.FrameHandlesFromClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrameHandles = true;
        result.frameHandles_ = value;
        return this;
      }
      public Builder SetFrameHandles(global::C2BNet.FrameHandlesFromClient.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrameHandles = true;
        result.frameHandles_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrameHandles(global::C2BNet.FrameHandlesFromClient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrameHandles &&
            result.frameHandles_ != global::C2BNet.FrameHandlesFromClient.DefaultInstance) {
            result.frameHandles_ = global::C2BNet.FrameHandlesFromClient.CreateBuilder(result.frameHandles_).MergeFrom(value).BuildPartial();
        } else {
          result.frameHandles_ = value;
        }
        result.hasFrameHandles = true;
        return this;
      }
      public Builder ClearFrameHandles() {
        PrepareBuilder();
        result.hasFrameHandles = false;
        result.frameHandles_ = null;
        return this;
      }
      
      public bool HasPercentForward {
       get { return result.hasPercentForward; }
      }
      public global::C2BNet.PercentForward PercentForward {
        get { return result.PercentForward; }
        set { SetPercentForward(value); }
      }
      public Builder SetPercentForward(global::C2BNet.PercentForward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPercentForward = true;
        result.percentForward_ = value;
        return this;
      }
      public Builder SetPercentForward(global::C2BNet.PercentForward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPercentForward = true;
        result.percentForward_ = builderForValue.Build();
        return this;
      }
      public Builder MergePercentForward(global::C2BNet.PercentForward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPercentForward &&
            result.percentForward_ != global::C2BNet.PercentForward.DefaultInstance) {
            result.percentForward_ = global::C2BNet.PercentForward.CreateBuilder(result.percentForward_).MergeFrom(value).BuildPartial();
        } else {
          result.percentForward_ = value;
        }
        result.hasPercentForward = true;
        return this;
      }
      public Builder ClearPercentForward() {
        PrepareBuilder();
        result.hasPercentForward = false;
        result.percentForward_ = null;
        return this;
      }
      
      public bool HasGameOverReq {
       get { return result.hasGameOverReq; }
      }
      public global::C2BNet.GameOverRequest GameOverReq {
        get { return result.GameOverReq; }
        set { SetGameOverReq(value); }
      }
      public Builder SetGameOverReq(global::C2BNet.GameOverRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameOverReq = true;
        result.gameOverReq_ = value;
        return this;
      }
      public Builder SetGameOverReq(global::C2BNet.GameOverRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameOverReq = true;
        result.gameOverReq_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameOverReq(global::C2BNet.GameOverRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameOverReq &&
            result.gameOverReq_ != global::C2BNet.GameOverRequest.DefaultInstance) {
            result.gameOverReq_ = global::C2BNet.GameOverRequest.CreateBuilder(result.gameOverReq_).MergeFrom(value).BuildPartial();
        } else {
          result.gameOverReq_ = value;
        }
        result.hasGameOverReq = true;
        return this;
      }
      public Builder ClearGameOverReq() {
        PrepareBuilder();
        result.hasGameOverReq = false;
        result.gameOverReq_ = null;
        return this;
      }
      
      public bool HasRepairFrameReq {
       get { return result.hasRepairFrameReq; }
      }
      public global::C2BNet.RepairFrameRequest RepairFrameReq {
        get { return result.RepairFrameReq; }
        set { SetRepairFrameReq(value); }
      }
      public Builder SetRepairFrameReq(global::C2BNet.RepairFrameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRepairFrameReq = true;
        result.repairFrameReq_ = value;
        return this;
      }
      public Builder SetRepairFrameReq(global::C2BNet.RepairFrameRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRepairFrameReq = true;
        result.repairFrameReq_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRepairFrameReq(global::C2BNet.RepairFrameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRepairFrameReq &&
            result.repairFrameReq_ != global::C2BNet.RepairFrameRequest.DefaultInstance) {
            result.repairFrameReq_ = global::C2BNet.RepairFrameRequest.CreateBuilder(result.repairFrameReq_).MergeFrom(value).BuildPartial();
        } else {
          result.repairFrameReq_ = value;
        }
        result.hasRepairFrameReq = true;
        return this;
      }
      public Builder ClearRepairFrameReq() {
        PrepareBuilder();
        result.hasRepairFrameReq = false;
        result.repairFrameReq_ = null;
        return this;
      }
      
      public bool HasHeartBeatRequest {
       get { return result.hasHeartBeatRequest; }
      }
      public global::C2BNet.HeartBeatRequest HeartBeatRequest {
        get { return result.HeartBeatRequest; }
        set { SetHeartBeatRequest(value); }
      }
      public Builder SetHeartBeatRequest(global::C2BNet.HeartBeatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeartBeatRequest = true;
        result.heartBeatRequest_ = value;
        return this;
      }
      public Builder SetHeartBeatRequest(global::C2BNet.HeartBeatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeartBeatRequest = true;
        result.heartBeatRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeartBeatRequest(global::C2BNet.HeartBeatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeartBeatRequest &&
            result.heartBeatRequest_ != global::C2BNet.HeartBeatRequest.DefaultInstance) {
            result.heartBeatRequest_ = global::C2BNet.HeartBeatRequest.CreateBuilder(result.heartBeatRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.heartBeatRequest_ = value;
        }
        result.hasHeartBeatRequest = true;
        return this;
      }
      public Builder ClearHeartBeatRequest() {
        PrepareBuilder();
        result.hasHeartBeatRequest = false;
        result.heartBeatRequest_ = null;
        return this;
      }
    }
    static C2BNetMessageRequest() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class C2BNetMessageResponse : pb::GeneratedMessage<C2BNetMessageResponse, C2BNetMessageResponse.Builder> {
    private C2BNetMessageResponse() { }
    private static readonly C2BNetMessageResponse defaultInstance = new C2BNetMessageResponse().MakeReadOnly();
    private static readonly string[] _c2BNetMessageResponseFieldNames = new string[] { "frameHandleRes", "heartBeatRes", "liveFrameRes", "percentForwardRes", "repairFrameRes" };
    private static readonly uint[] _c2BNetMessageResponseFieldTags = new uint[] { 10, 42, 34, 18, 26 };
    public static C2BNetMessageResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override C2BNetMessageResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override C2BNetMessageResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessageResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<C2BNetMessageResponse, C2BNetMessageResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_C2BNetMessageResponse__FieldAccessorTable; }
    }
    
    public const int FrameHandleResFieldNumber = 1;
    private bool hasFrameHandleRes;
    private global::C2BNet.FrameHandleResponse frameHandleRes_;
    public bool HasFrameHandleRes {
      get { return hasFrameHandleRes; }
    }
    public global::C2BNet.FrameHandleResponse FrameHandleRes {
      get { return frameHandleRes_ ?? global::C2BNet.FrameHandleResponse.DefaultInstance; }
    }
    
    public const int PercentForwardResFieldNumber = 2;
    private bool hasPercentForwardRes;
    private global::C2BNet.PercentForwardResponse percentForwardRes_;
    public bool HasPercentForwardRes {
      get { return hasPercentForwardRes; }
    }
    public global::C2BNet.PercentForwardResponse PercentForwardRes {
      get { return percentForwardRes_ ?? global::C2BNet.PercentForwardResponse.DefaultInstance; }
    }
    
    public const int RepairFrameResFieldNumber = 3;
    private bool hasRepairFrameRes;
    private global::C2BNet.RepairFrameResponse repairFrameRes_;
    public bool HasRepairFrameRes {
      get { return hasRepairFrameRes; }
    }
    public global::C2BNet.RepairFrameResponse RepairFrameRes {
      get { return repairFrameRes_ ?? global::C2BNet.RepairFrameResponse.DefaultInstance; }
    }
    
    public const int LiveFrameResFieldNumber = 4;
    private bool hasLiveFrameRes;
    private global::C2BNet.LiveFrameResponse liveFrameRes_;
    public bool HasLiveFrameRes {
      get { return hasLiveFrameRes; }
    }
    public global::C2BNet.LiveFrameResponse LiveFrameRes {
      get { return liveFrameRes_ ?? global::C2BNet.LiveFrameResponse.DefaultInstance; }
    }
    
    public const int HeartBeatResFieldNumber = 5;
    private bool hasHeartBeatRes;
    private global::C2BNet.HeartBeatResponse heartBeatRes_;
    public bool HasHeartBeatRes {
      get { return hasHeartBeatRes; }
    }
    public global::C2BNet.HeartBeatResponse HeartBeatRes {
      get { return heartBeatRes_ ?? global::C2BNet.HeartBeatResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _c2BNetMessageResponseFieldNames;
      if (hasFrameHandleRes) {
        output.WriteMessage(1, field_names[0], FrameHandleRes);
      }
      if (hasPercentForwardRes) {
        output.WriteMessage(2, field_names[3], PercentForwardRes);
      }
      if (hasRepairFrameRes) {
        output.WriteMessage(3, field_names[4], RepairFrameRes);
      }
      if (hasLiveFrameRes) {
        output.WriteMessage(4, field_names[2], LiveFrameRes);
      }
      if (hasHeartBeatRes) {
        output.WriteMessage(5, field_names[1], HeartBeatRes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFrameHandleRes) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, FrameHandleRes);
      }
      if (hasPercentForwardRes) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, PercentForwardRes);
      }
      if (hasRepairFrameRes) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, RepairFrameRes);
      }
      if (hasLiveFrameRes) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, LiveFrameRes);
      }
      if (hasHeartBeatRes) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, HeartBeatRes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static C2BNetMessageResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static C2BNetMessageResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static C2BNetMessageResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private C2BNetMessageResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(C2BNetMessageResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<C2BNetMessageResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(C2BNetMessageResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private C2BNetMessageResponse result;
      
      private C2BNetMessageResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          C2BNetMessageResponse original = result;
          result = new C2BNetMessageResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override C2BNetMessageResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.C2BNetMessageResponse.Descriptor; }
      }
      
      public override C2BNetMessageResponse DefaultInstanceForType {
        get { return global::C2BNet.C2BNetMessageResponse.DefaultInstance; }
      }
      
      public override C2BNetMessageResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is C2BNetMessageResponse) {
          return MergeFrom((C2BNetMessageResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(C2BNetMessageResponse other) {
        if (other == global::C2BNet.C2BNetMessageResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrameHandleRes) {
          MergeFrameHandleRes(other.FrameHandleRes);
        }
        if (other.HasPercentForwardRes) {
          MergePercentForwardRes(other.PercentForwardRes);
        }
        if (other.HasRepairFrameRes) {
          MergeRepairFrameRes(other.RepairFrameRes);
        }
        if (other.HasLiveFrameRes) {
          MergeLiveFrameRes(other.LiveFrameRes);
        }
        if (other.HasHeartBeatRes) {
          MergeHeartBeatRes(other.HeartBeatRes);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_c2BNetMessageResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _c2BNetMessageResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::C2BNet.FrameHandleResponse.Builder subBuilder = global::C2BNet.FrameHandleResponse.CreateBuilder();
              if (result.hasFrameHandleRes) {
                subBuilder.MergeFrom(FrameHandleRes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FrameHandleRes = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::C2BNet.PercentForwardResponse.Builder subBuilder = global::C2BNet.PercentForwardResponse.CreateBuilder();
              if (result.hasPercentForwardRes) {
                subBuilder.MergeFrom(PercentForwardRes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PercentForwardRes = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::C2BNet.RepairFrameResponse.Builder subBuilder = global::C2BNet.RepairFrameResponse.CreateBuilder();
              if (result.hasRepairFrameRes) {
                subBuilder.MergeFrom(RepairFrameRes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RepairFrameRes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::C2BNet.LiveFrameResponse.Builder subBuilder = global::C2BNet.LiveFrameResponse.CreateBuilder();
              if (result.hasLiveFrameRes) {
                subBuilder.MergeFrom(LiveFrameRes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LiveFrameRes = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::C2BNet.HeartBeatResponse.Builder subBuilder = global::C2BNet.HeartBeatResponse.CreateBuilder();
              if (result.hasHeartBeatRes) {
                subBuilder.MergeFrom(HeartBeatRes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeartBeatRes = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrameHandleRes {
       get { return result.hasFrameHandleRes; }
      }
      public global::C2BNet.FrameHandleResponse FrameHandleRes {
        get { return result.FrameHandleRes; }
        set { SetFrameHandleRes(value); }
      }
      public Builder SetFrameHandleRes(global::C2BNet.FrameHandleResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrameHandleRes = true;
        result.frameHandleRes_ = value;
        return this;
      }
      public Builder SetFrameHandleRes(global::C2BNet.FrameHandleResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrameHandleRes = true;
        result.frameHandleRes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrameHandleRes(global::C2BNet.FrameHandleResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrameHandleRes &&
            result.frameHandleRes_ != global::C2BNet.FrameHandleResponse.DefaultInstance) {
            result.frameHandleRes_ = global::C2BNet.FrameHandleResponse.CreateBuilder(result.frameHandleRes_).MergeFrom(value).BuildPartial();
        } else {
          result.frameHandleRes_ = value;
        }
        result.hasFrameHandleRes = true;
        return this;
      }
      public Builder ClearFrameHandleRes() {
        PrepareBuilder();
        result.hasFrameHandleRes = false;
        result.frameHandleRes_ = null;
        return this;
      }
      
      public bool HasPercentForwardRes {
       get { return result.hasPercentForwardRes; }
      }
      public global::C2BNet.PercentForwardResponse PercentForwardRes {
        get { return result.PercentForwardRes; }
        set { SetPercentForwardRes(value); }
      }
      public Builder SetPercentForwardRes(global::C2BNet.PercentForwardResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPercentForwardRes = true;
        result.percentForwardRes_ = value;
        return this;
      }
      public Builder SetPercentForwardRes(global::C2BNet.PercentForwardResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPercentForwardRes = true;
        result.percentForwardRes_ = builderForValue.Build();
        return this;
      }
      public Builder MergePercentForwardRes(global::C2BNet.PercentForwardResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPercentForwardRes &&
            result.percentForwardRes_ != global::C2BNet.PercentForwardResponse.DefaultInstance) {
            result.percentForwardRes_ = global::C2BNet.PercentForwardResponse.CreateBuilder(result.percentForwardRes_).MergeFrom(value).BuildPartial();
        } else {
          result.percentForwardRes_ = value;
        }
        result.hasPercentForwardRes = true;
        return this;
      }
      public Builder ClearPercentForwardRes() {
        PrepareBuilder();
        result.hasPercentForwardRes = false;
        result.percentForwardRes_ = null;
        return this;
      }
      
      public bool HasRepairFrameRes {
       get { return result.hasRepairFrameRes; }
      }
      public global::C2BNet.RepairFrameResponse RepairFrameRes {
        get { return result.RepairFrameRes; }
        set { SetRepairFrameRes(value); }
      }
      public Builder SetRepairFrameRes(global::C2BNet.RepairFrameResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRepairFrameRes = true;
        result.repairFrameRes_ = value;
        return this;
      }
      public Builder SetRepairFrameRes(global::C2BNet.RepairFrameResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRepairFrameRes = true;
        result.repairFrameRes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRepairFrameRes(global::C2BNet.RepairFrameResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRepairFrameRes &&
            result.repairFrameRes_ != global::C2BNet.RepairFrameResponse.DefaultInstance) {
            result.repairFrameRes_ = global::C2BNet.RepairFrameResponse.CreateBuilder(result.repairFrameRes_).MergeFrom(value).BuildPartial();
        } else {
          result.repairFrameRes_ = value;
        }
        result.hasRepairFrameRes = true;
        return this;
      }
      public Builder ClearRepairFrameRes() {
        PrepareBuilder();
        result.hasRepairFrameRes = false;
        result.repairFrameRes_ = null;
        return this;
      }
      
      public bool HasLiveFrameRes {
       get { return result.hasLiveFrameRes; }
      }
      public global::C2BNet.LiveFrameResponse LiveFrameRes {
        get { return result.LiveFrameRes; }
        set { SetLiveFrameRes(value); }
      }
      public Builder SetLiveFrameRes(global::C2BNet.LiveFrameResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLiveFrameRes = true;
        result.liveFrameRes_ = value;
        return this;
      }
      public Builder SetLiveFrameRes(global::C2BNet.LiveFrameResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLiveFrameRes = true;
        result.liveFrameRes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLiveFrameRes(global::C2BNet.LiveFrameResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLiveFrameRes &&
            result.liveFrameRes_ != global::C2BNet.LiveFrameResponse.DefaultInstance) {
            result.liveFrameRes_ = global::C2BNet.LiveFrameResponse.CreateBuilder(result.liveFrameRes_).MergeFrom(value).BuildPartial();
        } else {
          result.liveFrameRes_ = value;
        }
        result.hasLiveFrameRes = true;
        return this;
      }
      public Builder ClearLiveFrameRes() {
        PrepareBuilder();
        result.hasLiveFrameRes = false;
        result.liveFrameRes_ = null;
        return this;
      }
      
      public bool HasHeartBeatRes {
       get { return result.hasHeartBeatRes; }
      }
      public global::C2BNet.HeartBeatResponse HeartBeatRes {
        get { return result.HeartBeatRes; }
        set { SetHeartBeatRes(value); }
      }
      public Builder SetHeartBeatRes(global::C2BNet.HeartBeatResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeartBeatRes = true;
        result.heartBeatRes_ = value;
        return this;
      }
      public Builder SetHeartBeatRes(global::C2BNet.HeartBeatResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeartBeatRes = true;
        result.heartBeatRes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeartBeatRes(global::C2BNet.HeartBeatResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeartBeatRes &&
            result.heartBeatRes_ != global::C2BNet.HeartBeatResponse.DefaultInstance) {
            result.heartBeatRes_ = global::C2BNet.HeartBeatResponse.CreateBuilder(result.heartBeatRes_).MergeFrom(value).BuildPartial();
        } else {
          result.heartBeatRes_ = value;
        }
        result.hasHeartBeatRes = true;
        return this;
      }
      public Builder ClearHeartBeatRes() {
        PrepareBuilder();
        result.hasHeartBeatRes = false;
        result.heartBeatRes_ = null;
        return this;
      }
    }
    static C2BNetMessageResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartBeatRequest : pb::GeneratedMessage<HeartBeatRequest, HeartBeatRequest.Builder> {
    private HeartBeatRequest() { }
    private static readonly HeartBeatRequest defaultInstance = new HeartBeatRequest().MakeReadOnly();
    private static readonly string[] _heartBeatRequestFieldNames = new string[] {  };
    private static readonly uint[] _heartBeatRequestFieldTags = new uint[] {  };
    public static HeartBeatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeartBeatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeartBeatRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_HeartBeatRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeartBeatRequest, HeartBeatRequest.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_HeartBeatRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _heartBeatRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static HeartBeatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeartBeatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartBeatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeartBeatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeartBeatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HeartBeatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeartBeatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeartBeatRequest result;
      
      private HeartBeatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          HeartBeatRequest original = result;
          result = new HeartBeatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeartBeatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.HeartBeatRequest.Descriptor; }
      }
      
      public override HeartBeatRequest DefaultInstanceForType {
        get { return global::C2BNet.HeartBeatRequest.DefaultInstance; }
      }
      
      public override HeartBeatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeartBeatRequest) {
          return MergeFrom((HeartBeatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeartBeatRequest other) {
        if (other == global::C2BNet.HeartBeatRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heartBeatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heartBeatRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static HeartBeatRequest() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartBeatResponse : pb::GeneratedMessage<HeartBeatResponse, HeartBeatResponse.Builder> {
    private HeartBeatResponse() { }
    private static readonly HeartBeatResponse defaultInstance = new HeartBeatResponse().MakeReadOnly();
    private static readonly string[] _heartBeatResponseFieldNames = new string[] {  };
    private static readonly uint[] _heartBeatResponseFieldTags = new uint[] {  };
    public static HeartBeatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeartBeatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeartBeatResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_HeartBeatResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeartBeatResponse, HeartBeatResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_HeartBeatResponse__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _heartBeatResponseFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static HeartBeatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeartBeatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeartBeatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeartBeatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeartBeatResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeartBeatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HeartBeatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeartBeatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeartBeatResponse result;
      
      private HeartBeatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          HeartBeatResponse original = result;
          result = new HeartBeatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeartBeatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.HeartBeatResponse.Descriptor; }
      }
      
      public override HeartBeatResponse DefaultInstanceForType {
        get { return global::C2BNet.HeartBeatResponse.DefaultInstance; }
      }
      
      public override HeartBeatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeartBeatResponse) {
          return MergeFrom((HeartBeatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeartBeatResponse other) {
        if (other == global::C2BNet.HeartBeatResponse.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heartBeatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heartBeatResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static HeartBeatResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FrameHandle : pb::GeneratedMessage<FrameHandle, FrameHandle.Builder> {
    private FrameHandle() { }
    private static readonly FrameHandle defaultInstance = new FrameHandle().MakeReadOnly();
    private static readonly string[] _frameHandleFieldNames = new string[] { "OpretionId", "opt", "optDetail", "optValue1", "optValue2", "userId" };
    private static readonly uint[] _frameHandleFieldTags = new uint[] { 24, 16, 48, 32, 40, 8 };
    public static FrameHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FrameHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FrameHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FrameHandle, FrameHandle.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandle__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int OptFieldNumber = 2;
    private bool hasOpt;
    private int opt_;
    public bool HasOpt {
      get { return hasOpt; }
    }
    public int Opt {
      get { return opt_; }
    }
    
    public const int OpretionIdFieldNumber = 3;
    private bool hasOpretionId;
    private int opretionId_;
    public bool HasOpretionId {
      get { return hasOpretionId; }
    }
    public int OpretionId {
      get { return opretionId_; }
    }
    
    public const int OptValue1FieldNumber = 4;
    private bool hasOptValue1;
    private int optValue1_;
    public bool HasOptValue1 {
      get { return hasOptValue1; }
    }
    public int OptValue1 {
      get { return optValue1_; }
    }
    
    public const int OptValue2FieldNumber = 5;
    private bool hasOptValue2;
    private int optValue2_;
    public bool HasOptValue2 {
      get { return hasOptValue2; }
    }
    public int OptValue2 {
      get { return optValue2_; }
    }
    
    public const int OptDetailFieldNumber = 6;
    private pbc::PopsicleList<ulong> optDetail_ = new pbc::PopsicleList<ulong>();
    [global::System.CLSCompliant(false)]
    public scg::IList<ulong> OptDetailList {
      get { return pbc::Lists.AsReadOnly(optDetail_); }
    }
    public int OptDetailCount {
      get { return optDetail_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public ulong GetOptDetail(int index) {
      return optDetail_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _frameHandleFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[5], UserId);
      }
      if (hasOpt) {
        output.WriteInt32(2, field_names[1], Opt);
      }
      if (hasOpretionId) {
        output.WriteInt32(3, field_names[0], OpretionId);
      }
      if (hasOptValue1) {
        output.WriteInt32(4, field_names[3], OptValue1);
      }
      if (hasOptValue2) {
        output.WriteInt32(5, field_names[4], OptValue2);
      }
      if (optDetail_.Count > 0) {
        output.WriteUInt64Array(6, field_names[2], optDetail_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      if (hasOpt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Opt);
      }
      if (hasOpretionId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, OpretionId);
      }
      if (hasOptValue1) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, OptValue1);
      }
      if (hasOptValue2) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, OptValue2);
      }
      {
        int dataSize = 0;
        foreach (ulong element in OptDetailList) {
          dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * optDetail_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FrameHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FrameHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FrameHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FrameHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FrameHandle MakeReadOnly() {
      optDetail_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FrameHandle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FrameHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FrameHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FrameHandle result;
      
      private FrameHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          FrameHandle original = result;
          result = new FrameHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FrameHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.FrameHandle.Descriptor; }
      }
      
      public override FrameHandle DefaultInstanceForType {
        get { return global::C2BNet.FrameHandle.DefaultInstance; }
      }
      
      public override FrameHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FrameHandle) {
          return MergeFrom((FrameHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FrameHandle other) {
        if (other == global::C2BNet.FrameHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasOpt) {
          Opt = other.Opt;
        }
        if (other.HasOpretionId) {
          OpretionId = other.OpretionId;
        }
        if (other.HasOptValue1) {
          OptValue1 = other.OptValue1;
        }
        if (other.HasOptValue2) {
          OptValue2 = other.OptValue2;
        }
        if (other.optDetail_.Count != 0) {
          result.optDetail_.Add(other.optDetail_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_frameHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _frameHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 16: {
              result.hasOpt = input.ReadInt32(ref result.opt_);
              break;
            }
            case 24: {
              result.hasOpretionId = input.ReadInt32(ref result.opretionId_);
              break;
            }
            case 32: {
              result.hasOptValue1 = input.ReadInt32(ref result.optValue1_);
              break;
            }
            case 40: {
              result.hasOptValue2 = input.ReadInt32(ref result.optValue2_);
              break;
            }
            case 50:
            case 48: {
              input.ReadUInt64Array(tag, field_name, result.optDetail_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasOpt {
        get { return result.hasOpt; }
      }
      public int Opt {
        get { return result.Opt; }
        set { SetOpt(value); }
      }
      public Builder SetOpt(int value) {
        PrepareBuilder();
        result.hasOpt = true;
        result.opt_ = value;
        return this;
      }
      public Builder ClearOpt() {
        PrepareBuilder();
        result.hasOpt = false;
        result.opt_ = 0;
        return this;
      }
      
      public bool HasOpretionId {
        get { return result.hasOpretionId; }
      }
      public int OpretionId {
        get { return result.OpretionId; }
        set { SetOpretionId(value); }
      }
      public Builder SetOpretionId(int value) {
        PrepareBuilder();
        result.hasOpretionId = true;
        result.opretionId_ = value;
        return this;
      }
      public Builder ClearOpretionId() {
        PrepareBuilder();
        result.hasOpretionId = false;
        result.opretionId_ = 0;
        return this;
      }
      
      public bool HasOptValue1 {
        get { return result.hasOptValue1; }
      }
      public int OptValue1 {
        get { return result.OptValue1; }
        set { SetOptValue1(value); }
      }
      public Builder SetOptValue1(int value) {
        PrepareBuilder();
        result.hasOptValue1 = true;
        result.optValue1_ = value;
        return this;
      }
      public Builder ClearOptValue1() {
        PrepareBuilder();
        result.hasOptValue1 = false;
        result.optValue1_ = 0;
        return this;
      }
      
      public bool HasOptValue2 {
        get { return result.hasOptValue2; }
      }
      public int OptValue2 {
        get { return result.OptValue2; }
        set { SetOptValue2(value); }
      }
      public Builder SetOptValue2(int value) {
        PrepareBuilder();
        result.hasOptValue2 = true;
        result.optValue2_ = value;
        return this;
      }
      public Builder ClearOptValue2() {
        PrepareBuilder();
        result.hasOptValue2 = false;
        result.optValue2_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<ulong> OptDetailList {
        get { return PrepareBuilder().optDetail_; }
      }
      public int OptDetailCount {
        get { return result.OptDetailCount; }
      }
      [global::System.CLSCompliant(false)]
      public ulong GetOptDetail(int index) {
        return result.GetOptDetail(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOptDetail(int index, ulong value) {
        PrepareBuilder();
        result.optDetail_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddOptDetail(ulong value) {
        PrepareBuilder();
        result.optDetail_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeOptDetail(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.optDetail_.Add(values);
        return this;
      }
      public Builder ClearOptDetail() {
        PrepareBuilder();
        result.optDetail_.Clear();
        return this;
      }
    }
    static FrameHandle() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FrameHandleResponse : pb::GeneratedMessage<FrameHandleResponse, FrameHandleResponse.Builder> {
    private FrameHandleResponse() { }
    private static readonly FrameHandleResponse defaultInstance = new FrameHandleResponse().MakeReadOnly();
    private static readonly string[] _frameHandleResponseFieldNames = new string[] { "frame", "frameHandles" };
    private static readonly uint[] _frameHandleResponseFieldTags = new uint[] { 8, 18 };
    public static FrameHandleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FrameHandleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FrameHandleResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandleResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FrameHandleResponse, FrameHandleResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandleResponse__FieldAccessorTable; }
    }
    
    public const int FrameFieldNumber = 1;
    private bool hasFrame;
    private int frame_;
    public bool HasFrame {
      get { return hasFrame; }
    }
    public int Frame {
      get { return frame_; }
    }
    
    public const int FrameHandlesFieldNumber = 2;
    private pbc::PopsicleList<global::C2BNet.FrameHandle> frameHandles_ = new pbc::PopsicleList<global::C2BNet.FrameHandle>();
    public scg::IList<global::C2BNet.FrameHandle> FrameHandlesList {
      get { return frameHandles_; }
    }
    public int FrameHandlesCount {
      get { return frameHandles_.Count; }
    }
    public global::C2BNet.FrameHandle GetFrameHandles(int index) {
      return frameHandles_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _frameHandleResponseFieldNames;
      if (hasFrame) {
        output.WriteInt32(1, field_names[0], Frame);
      }
      if (frameHandles_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], frameHandles_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFrame) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Frame);
      }
      foreach (global::C2BNet.FrameHandle element in FrameHandlesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FrameHandleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FrameHandleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FrameHandleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FrameHandleResponse MakeReadOnly() {
      frameHandles_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FrameHandleResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FrameHandleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FrameHandleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FrameHandleResponse result;
      
      private FrameHandleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          FrameHandleResponse original = result;
          result = new FrameHandleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FrameHandleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.FrameHandleResponse.Descriptor; }
      }
      
      public override FrameHandleResponse DefaultInstanceForType {
        get { return global::C2BNet.FrameHandleResponse.DefaultInstance; }
      }
      
      public override FrameHandleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FrameHandleResponse) {
          return MergeFrom((FrameHandleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FrameHandleResponse other) {
        if (other == global::C2BNet.FrameHandleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrame) {
          Frame = other.Frame;
        }
        if (other.frameHandles_.Count != 0) {
          result.frameHandles_.Add(other.frameHandles_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_frameHandleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _frameHandleResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrame = input.ReadInt32(ref result.frame_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.frameHandles_, global::C2BNet.FrameHandle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrame {
        get { return result.hasFrame; }
      }
      public int Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      public Builder SetFrame(int value) {
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::C2BNet.FrameHandle> FrameHandlesList {
        get { return PrepareBuilder().frameHandles_; }
      }
      public int FrameHandlesCount {
        get { return result.FrameHandlesCount; }
      }
      public global::C2BNet.FrameHandle GetFrameHandles(int index) {
        return result.GetFrameHandles(index);
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_[index] = value;
        return this;
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_.Add(value);
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFrameHandles(scg::IEnumerable<global::C2BNet.FrameHandle> values) {
        PrepareBuilder();
        result.frameHandles_.Add(values);
        return this;
      }
      public Builder ClearFrameHandles() {
        PrepareBuilder();
        result.frameHandles_.Clear();
        return this;
      }
    }
    static FrameHandleResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FrameHandlesFromClient : pb::GeneratedMessage<FrameHandlesFromClient, FrameHandlesFromClient.Builder> {
    private FrameHandlesFromClient() { }
    private static readonly FrameHandlesFromClient defaultInstance = new FrameHandlesFromClient().MakeReadOnly();
    private static readonly string[] _frameHandlesFromClientFieldNames = new string[] { "frameHandles", "userId" };
    private static readonly uint[] _frameHandlesFromClientFieldTags = new uint[] { 18, 8 };
    public static FrameHandlesFromClient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FrameHandlesFromClient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FrameHandlesFromClient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandlesFromClient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FrameHandlesFromClient, FrameHandlesFromClient.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_FrameHandlesFromClient__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int FrameHandlesFieldNumber = 2;
    private pbc::PopsicleList<global::C2BNet.FrameHandle> frameHandles_ = new pbc::PopsicleList<global::C2BNet.FrameHandle>();
    public scg::IList<global::C2BNet.FrameHandle> FrameHandlesList {
      get { return frameHandles_; }
    }
    public int FrameHandlesCount {
      get { return frameHandles_.Count; }
    }
    public global::C2BNet.FrameHandle GetFrameHandles(int index) {
      return frameHandles_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _frameHandlesFromClientFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[1], UserId);
      }
      if (frameHandles_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], frameHandles_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      foreach (global::C2BNet.FrameHandle element in FrameHandlesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FrameHandlesFromClient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FrameHandlesFromClient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FrameHandlesFromClient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FrameHandlesFromClient MakeReadOnly() {
      frameHandles_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FrameHandlesFromClient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FrameHandlesFromClient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FrameHandlesFromClient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FrameHandlesFromClient result;
      
      private FrameHandlesFromClient PrepareBuilder() {
        if (resultIsReadOnly) {
          FrameHandlesFromClient original = result;
          result = new FrameHandlesFromClient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FrameHandlesFromClient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.FrameHandlesFromClient.Descriptor; }
      }
      
      public override FrameHandlesFromClient DefaultInstanceForType {
        get { return global::C2BNet.FrameHandlesFromClient.DefaultInstance; }
      }
      
      public override FrameHandlesFromClient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FrameHandlesFromClient) {
          return MergeFrom((FrameHandlesFromClient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FrameHandlesFromClient other) {
        if (other == global::C2BNet.FrameHandlesFromClient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.frameHandles_.Count != 0) {
          result.frameHandles_.Add(other.frameHandles_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_frameHandlesFromClientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _frameHandlesFromClientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.frameHandles_, global::C2BNet.FrameHandle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::C2BNet.FrameHandle> FrameHandlesList {
        get { return PrepareBuilder().frameHandles_; }
      }
      public int FrameHandlesCount {
        get { return result.FrameHandlesCount; }
      }
      public global::C2BNet.FrameHandle GetFrameHandles(int index) {
        return result.GetFrameHandles(index);
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_[index] = value;
        return this;
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_.Add(value);
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFrameHandles(scg::IEnumerable<global::C2BNet.FrameHandle> values) {
        PrepareBuilder();
        result.frameHandles_.Add(values);
        return this;
      }
      public Builder ClearFrameHandles() {
        PrepareBuilder();
        result.frameHandles_.Clear();
        return this;
      }
    }
    static FrameHandlesFromClient() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PercentForward : pb::GeneratedMessage<PercentForward, PercentForward.Builder> {
    private PercentForward() { }
    private static readonly PercentForward defaultInstance = new PercentForward().MakeReadOnly();
    private static readonly string[] _percentForwardFieldNames = new string[] { "percent", "userId" };
    private static readonly uint[] _percentForwardFieldTags = new uint[] { 16, 8 };
    public static PercentForward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PercentForward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PercentForward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_PercentForward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PercentForward, PercentForward.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_PercentForward__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int PercentFieldNumber = 2;
    private bool hasPercent;
    private int percent_;
    public bool HasPercent {
      get { return hasPercent; }
    }
    public int Percent {
      get { return percent_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _percentForwardFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[1], UserId);
      }
      if (hasPercent) {
        output.WriteInt32(2, field_names[0], Percent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      if (hasPercent) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Percent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PercentForward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PercentForward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PercentForward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PercentForward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PercentForward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PercentForward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PercentForward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PercentForward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PercentForward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PercentForward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PercentForward MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PercentForward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PercentForward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PercentForward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PercentForward result;
      
      private PercentForward PrepareBuilder() {
        if (resultIsReadOnly) {
          PercentForward original = result;
          result = new PercentForward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PercentForward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.PercentForward.Descriptor; }
      }
      
      public override PercentForward DefaultInstanceForType {
        get { return global::C2BNet.PercentForward.DefaultInstance; }
      }
      
      public override PercentForward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PercentForward) {
          return MergeFrom((PercentForward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PercentForward other) {
        if (other == global::C2BNet.PercentForward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasPercent) {
          Percent = other.Percent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_percentForwardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _percentForwardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 16: {
              result.hasPercent = input.ReadInt32(ref result.percent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasPercent {
        get { return result.hasPercent; }
      }
      public int Percent {
        get { return result.Percent; }
        set { SetPercent(value); }
      }
      public Builder SetPercent(int value) {
        PrepareBuilder();
        result.hasPercent = true;
        result.percent_ = value;
        return this;
      }
      public Builder ClearPercent() {
        PrepareBuilder();
        result.hasPercent = false;
        result.percent_ = 0;
        return this;
      }
    }
    static PercentForward() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PercentForwardResponse : pb::GeneratedMessage<PercentForwardResponse, PercentForwardResponse.Builder> {
    private PercentForwardResponse() { }
    private static readonly PercentForwardResponse defaultInstance = new PercentForwardResponse().MakeReadOnly();
    private static readonly string[] _percentForwardResponseFieldNames = new string[] { "allUserLoadSucess", "percentForward" };
    private static readonly uint[] _percentForwardResponseFieldTags = new uint[] { 16, 10 };
    public static PercentForwardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PercentForwardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PercentForwardResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_PercentForwardResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PercentForwardResponse, PercentForwardResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_PercentForwardResponse__FieldAccessorTable; }
    }
    
    public const int PercentForwardFieldNumber = 1;
    private bool hasPercentForward;
    private global::C2BNet.PercentForward percentForward_;
    public bool HasPercentForward {
      get { return hasPercentForward; }
    }
    public global::C2BNet.PercentForward PercentForward {
      get { return percentForward_ ?? global::C2BNet.PercentForward.DefaultInstance; }
    }
    
    public const int AllUserLoadSucessFieldNumber = 2;
    private bool hasAllUserLoadSucess;
    private bool allUserLoadSucess_;
    public bool HasAllUserLoadSucess {
      get { return hasAllUserLoadSucess; }
    }
    public bool AllUserLoadSucess {
      get { return allUserLoadSucess_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _percentForwardResponseFieldNames;
      if (hasPercentForward) {
        output.WriteMessage(1, field_names[1], PercentForward);
      }
      if (hasAllUserLoadSucess) {
        output.WriteBool(2, field_names[0], AllUserLoadSucess);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPercentForward) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, PercentForward);
      }
      if (hasAllUserLoadSucess) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, AllUserLoadSucess);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PercentForwardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PercentForwardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PercentForwardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PercentForwardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PercentForwardResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PercentForwardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PercentForwardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PercentForwardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PercentForwardResponse result;
      
      private PercentForwardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PercentForwardResponse original = result;
          result = new PercentForwardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PercentForwardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.PercentForwardResponse.Descriptor; }
      }
      
      public override PercentForwardResponse DefaultInstanceForType {
        get { return global::C2BNet.PercentForwardResponse.DefaultInstance; }
      }
      
      public override PercentForwardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PercentForwardResponse) {
          return MergeFrom((PercentForwardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PercentForwardResponse other) {
        if (other == global::C2BNet.PercentForwardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPercentForward) {
          MergePercentForward(other.PercentForward);
        }
        if (other.HasAllUserLoadSucess) {
          AllUserLoadSucess = other.AllUserLoadSucess;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_percentForwardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _percentForwardResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::C2BNet.PercentForward.Builder subBuilder = global::C2BNet.PercentForward.CreateBuilder();
              if (result.hasPercentForward) {
                subBuilder.MergeFrom(PercentForward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PercentForward = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasAllUserLoadSucess = input.ReadBool(ref result.allUserLoadSucess_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPercentForward {
       get { return result.hasPercentForward; }
      }
      public global::C2BNet.PercentForward PercentForward {
        get { return result.PercentForward; }
        set { SetPercentForward(value); }
      }
      public Builder SetPercentForward(global::C2BNet.PercentForward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPercentForward = true;
        result.percentForward_ = value;
        return this;
      }
      public Builder SetPercentForward(global::C2BNet.PercentForward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPercentForward = true;
        result.percentForward_ = builderForValue.Build();
        return this;
      }
      public Builder MergePercentForward(global::C2BNet.PercentForward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPercentForward &&
            result.percentForward_ != global::C2BNet.PercentForward.DefaultInstance) {
            result.percentForward_ = global::C2BNet.PercentForward.CreateBuilder(result.percentForward_).MergeFrom(value).BuildPartial();
        } else {
          result.percentForward_ = value;
        }
        result.hasPercentForward = true;
        return this;
      }
      public Builder ClearPercentForward() {
        PrepareBuilder();
        result.hasPercentForward = false;
        result.percentForward_ = null;
        return this;
      }
      
      public bool HasAllUserLoadSucess {
        get { return result.hasAllUserLoadSucess; }
      }
      public bool AllUserLoadSucess {
        get { return result.AllUserLoadSucess; }
        set { SetAllUserLoadSucess(value); }
      }
      public Builder SetAllUserLoadSucess(bool value) {
        PrepareBuilder();
        result.hasAllUserLoadSucess = true;
        result.allUserLoadSucess_ = value;
        return this;
      }
      public Builder ClearAllUserLoadSucess() {
        PrepareBuilder();
        result.hasAllUserLoadSucess = false;
        result.allUserLoadSucess_ = false;
        return this;
      }
    }
    static PercentForwardResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameOverRequest : pb::GeneratedMessage<GameOverRequest, GameOverRequest.Builder> {
    private GameOverRequest() { }
    private static readonly GameOverRequest defaultInstance = new GameOverRequest().MakeReadOnly();
    private static readonly string[] _gameOverRequestFieldNames = new string[] {  };
    private static readonly uint[] _gameOverRequestFieldTags = new uint[] {  };
    public static GameOverRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameOverRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameOverRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_GameOverRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameOverRequest, GameOverRequest.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_GameOverRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameOverRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameOverRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameOverRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameOverRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameOverRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameOverRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameOverRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameOverRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameOverRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameOverRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameOverRequest result;
      
      private GameOverRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GameOverRequest original = result;
          result = new GameOverRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameOverRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.GameOverRequest.Descriptor; }
      }
      
      public override GameOverRequest DefaultInstanceForType {
        get { return global::C2BNet.GameOverRequest.DefaultInstance; }
      }
      
      public override GameOverRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameOverRequest) {
          return MergeFrom((GameOverRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameOverRequest other) {
        if (other == global::C2BNet.GameOverRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameOverRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameOverRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameOverRequest() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RepairFrameRequest : pb::GeneratedMessage<RepairFrameRequest, RepairFrameRequest.Builder> {
    private RepairFrameRequest() { }
    private static readonly RepairFrameRequest defaultInstance = new RepairFrameRequest().MakeReadOnly();
    private static readonly string[] _repairFrameRequestFieldNames = new string[] { "endFrame", "startFrame" };
    private static readonly uint[] _repairFrameRequestFieldTags = new uint[] { 16, 8 };
    public static RepairFrameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RepairFrameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RepairFrameRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrameRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RepairFrameRequest, RepairFrameRequest.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrameRequest__FieldAccessorTable; }
    }
    
    public const int StartFrameFieldNumber = 1;
    private bool hasStartFrame;
    private int startFrame_;
    public bool HasStartFrame {
      get { return hasStartFrame; }
    }
    public int StartFrame {
      get { return startFrame_; }
    }
    
    public const int EndFrameFieldNumber = 2;
    private bool hasEndFrame;
    private int endFrame_;
    public bool HasEndFrame {
      get { return hasEndFrame; }
    }
    public int EndFrame {
      get { return endFrame_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _repairFrameRequestFieldNames;
      if (hasStartFrame) {
        output.WriteInt32(1, field_names[1], StartFrame);
      }
      if (hasEndFrame) {
        output.WriteInt32(2, field_names[0], EndFrame);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartFrame) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, StartFrame);
      }
      if (hasEndFrame) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, EndFrame);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RepairFrameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RepairFrameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RepairFrameRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RepairFrameRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RepairFrameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RepairFrameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RepairFrameRequest result;
      
      private RepairFrameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RepairFrameRequest original = result;
          result = new RepairFrameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RepairFrameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.RepairFrameRequest.Descriptor; }
      }
      
      public override RepairFrameRequest DefaultInstanceForType {
        get { return global::C2BNet.RepairFrameRequest.DefaultInstance; }
      }
      
      public override RepairFrameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RepairFrameRequest) {
          return MergeFrom((RepairFrameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RepairFrameRequest other) {
        if (other == global::C2BNet.RepairFrameRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartFrame) {
          StartFrame = other.StartFrame;
        }
        if (other.HasEndFrame) {
          EndFrame = other.EndFrame;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_repairFrameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _repairFrameRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartFrame = input.ReadInt32(ref result.startFrame_);
              break;
            }
            case 16: {
              result.hasEndFrame = input.ReadInt32(ref result.endFrame_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartFrame {
        get { return result.hasStartFrame; }
      }
      public int StartFrame {
        get { return result.StartFrame; }
        set { SetStartFrame(value); }
      }
      public Builder SetStartFrame(int value) {
        PrepareBuilder();
        result.hasStartFrame = true;
        result.startFrame_ = value;
        return this;
      }
      public Builder ClearStartFrame() {
        PrepareBuilder();
        result.hasStartFrame = false;
        result.startFrame_ = 0;
        return this;
      }
      
      public bool HasEndFrame {
        get { return result.hasEndFrame; }
      }
      public int EndFrame {
        get { return result.EndFrame; }
        set { SetEndFrame(value); }
      }
      public Builder SetEndFrame(int value) {
        PrepareBuilder();
        result.hasEndFrame = true;
        result.endFrame_ = value;
        return this;
      }
      public Builder ClearEndFrame() {
        PrepareBuilder();
        result.hasEndFrame = false;
        result.endFrame_ = 0;
        return this;
      }
    }
    static RepairFrameRequest() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RepairFrameResponse : pb::GeneratedMessage<RepairFrameResponse, RepairFrameResponse.Builder> {
    private RepairFrameResponse() { }
    private static readonly RepairFrameResponse defaultInstance = new RepairFrameResponse().MakeReadOnly();
    private static readonly string[] _repairFrameResponseFieldNames = new string[] { "repairFrames" };
    private static readonly uint[] _repairFrameResponseFieldTags = new uint[] { 10 };
    public static RepairFrameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RepairFrameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RepairFrameResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrameResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RepairFrameResponse, RepairFrameResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrameResponse__FieldAccessorTable; }
    }
    
    public const int RepairFramesFieldNumber = 1;
    private pbc::PopsicleList<global::C2BNet.RepairFrame> repairFrames_ = new pbc::PopsicleList<global::C2BNet.RepairFrame>();
    public scg::IList<global::C2BNet.RepairFrame> RepairFramesList {
      get { return repairFrames_; }
    }
    public int RepairFramesCount {
      get { return repairFrames_.Count; }
    }
    public global::C2BNet.RepairFrame GetRepairFrames(int index) {
      return repairFrames_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _repairFrameResponseFieldNames;
      if (repairFrames_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], repairFrames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::C2BNet.RepairFrame element in RepairFramesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RepairFrameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RepairFrameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RepairFrameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RepairFrameResponse MakeReadOnly() {
      repairFrames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RepairFrameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RepairFrameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RepairFrameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RepairFrameResponse result;
      
      private RepairFrameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RepairFrameResponse original = result;
          result = new RepairFrameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RepairFrameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.RepairFrameResponse.Descriptor; }
      }
      
      public override RepairFrameResponse DefaultInstanceForType {
        get { return global::C2BNet.RepairFrameResponse.DefaultInstance; }
      }
      
      public override RepairFrameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RepairFrameResponse) {
          return MergeFrom((RepairFrameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RepairFrameResponse other) {
        if (other == global::C2BNet.RepairFrameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.repairFrames_.Count != 0) {
          result.repairFrames_.Add(other.repairFrames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_repairFrameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _repairFrameResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.repairFrames_, global::C2BNet.RepairFrame.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::C2BNet.RepairFrame> RepairFramesList {
        get { return PrepareBuilder().repairFrames_; }
      }
      public int RepairFramesCount {
        get { return result.RepairFramesCount; }
      }
      public global::C2BNet.RepairFrame GetRepairFrames(int index) {
        return result.GetRepairFrames(index);
      }
      public Builder SetRepairFrames(int index, global::C2BNet.RepairFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repairFrames_[index] = value;
        return this;
      }
      public Builder SetRepairFrames(int index, global::C2BNet.RepairFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.repairFrames_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRepairFrames(global::C2BNet.RepairFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.repairFrames_.Add(value);
        return this;
      }
      public Builder AddRepairFrames(global::C2BNet.RepairFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.repairFrames_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRepairFrames(scg::IEnumerable<global::C2BNet.RepairFrame> values) {
        PrepareBuilder();
        result.repairFrames_.Add(values);
        return this;
      }
      public Builder ClearRepairFrames() {
        PrepareBuilder();
        result.repairFrames_.Clear();
        return this;
      }
    }
    static RepairFrameResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RepairFrame : pb::GeneratedMessage<RepairFrame, RepairFrame.Builder> {
    private RepairFrame() { }
    private static readonly RepairFrame defaultInstance = new RepairFrame().MakeReadOnly();
    private static readonly string[] _repairFrameFieldNames = new string[] { "frame", "frameHandles" };
    private static readonly uint[] _repairFrameFieldTags = new uint[] { 8, 18 };
    public static RepairFrame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RepairFrame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RepairFrame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RepairFrame, RepairFrame.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_RepairFrame__FieldAccessorTable; }
    }
    
    public const int FrameFieldNumber = 1;
    private bool hasFrame;
    private int frame_;
    public bool HasFrame {
      get { return hasFrame; }
    }
    public int Frame {
      get { return frame_; }
    }
    
    public const int FrameHandlesFieldNumber = 2;
    private pbc::PopsicleList<global::C2BNet.FrameHandle> frameHandles_ = new pbc::PopsicleList<global::C2BNet.FrameHandle>();
    public scg::IList<global::C2BNet.FrameHandle> FrameHandlesList {
      get { return frameHandles_; }
    }
    public int FrameHandlesCount {
      get { return frameHandles_.Count; }
    }
    public global::C2BNet.FrameHandle GetFrameHandles(int index) {
      return frameHandles_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _repairFrameFieldNames;
      if (hasFrame) {
        output.WriteInt32(1, field_names[0], Frame);
      }
      if (frameHandles_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], frameHandles_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFrame) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Frame);
      }
      foreach (global::C2BNet.FrameHandle element in FrameHandlesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RepairFrame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RepairFrame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RepairFrame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RepairFrame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RepairFrame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RepairFrame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RepairFrame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RepairFrame MakeReadOnly() {
      frameHandles_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RepairFrame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RepairFrame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RepairFrame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RepairFrame result;
      
      private RepairFrame PrepareBuilder() {
        if (resultIsReadOnly) {
          RepairFrame original = result;
          result = new RepairFrame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RepairFrame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.RepairFrame.Descriptor; }
      }
      
      public override RepairFrame DefaultInstanceForType {
        get { return global::C2BNet.RepairFrame.DefaultInstance; }
      }
      
      public override RepairFrame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RepairFrame) {
          return MergeFrom((RepairFrame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RepairFrame other) {
        if (other == global::C2BNet.RepairFrame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrame) {
          Frame = other.Frame;
        }
        if (other.frameHandles_.Count != 0) {
          result.frameHandles_.Add(other.frameHandles_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_repairFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _repairFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrame = input.ReadInt32(ref result.frame_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.frameHandles_, global::C2BNet.FrameHandle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrame {
        get { return result.hasFrame; }
      }
      public int Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      public Builder SetFrame(int value) {
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::C2BNet.FrameHandle> FrameHandlesList {
        get { return PrepareBuilder().frameHandles_; }
      }
      public int FrameHandlesCount {
        get { return result.FrameHandlesCount; }
      }
      public global::C2BNet.FrameHandle GetFrameHandles(int index) {
        return result.GetFrameHandles(index);
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_[index] = value;
        return this;
      }
      public Builder SetFrameHandles(int index, global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frameHandles_.Add(value);
        return this;
      }
      public Builder AddFrameHandles(global::C2BNet.FrameHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frameHandles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFrameHandles(scg::IEnumerable<global::C2BNet.FrameHandle> values) {
        PrepareBuilder();
        result.frameHandles_.Add(values);
        return this;
      }
      public Builder ClearFrameHandles() {
        PrepareBuilder();
        result.frameHandles_.Clear();
        return this;
      }
    }
    static RepairFrame() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LiveFrameResponse : pb::GeneratedMessage<LiveFrameResponse, LiveFrameResponse.Builder> {
    private LiveFrameResponse() { }
    private static readonly LiveFrameResponse defaultInstance = new LiveFrameResponse().MakeReadOnly();
    private static readonly string[] _liveFrameResponseFieldNames = new string[] { "liveFrames" };
    private static readonly uint[] _liveFrameResponseFieldTags = new uint[] { 10 };
    public static LiveFrameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LiveFrameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LiveFrameResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_LiveFrameResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LiveFrameResponse, LiveFrameResponse.Builder> InternalFieldAccessors {
      get { return global::C2BNet.Proto.C2BNetMessage.internal__static_C2BNet_LiveFrameResponse__FieldAccessorTable; }
    }
    
    public const int LiveFramesFieldNumber = 1;
    private pbc::PopsicleList<global::C2BNet.RepairFrame> liveFrames_ = new pbc::PopsicleList<global::C2BNet.RepairFrame>();
    public scg::IList<global::C2BNet.RepairFrame> LiveFramesList {
      get { return liveFrames_; }
    }
    public int LiveFramesCount {
      get { return liveFrames_.Count; }
    }
    public global::C2BNet.RepairFrame GetLiveFrames(int index) {
      return liveFrames_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _liveFrameResponseFieldNames;
      if (liveFrames_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], liveFrames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::C2BNet.RepairFrame element in LiveFramesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LiveFrameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LiveFrameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LiveFrameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LiveFrameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LiveFrameResponse MakeReadOnly() {
      liveFrames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LiveFrameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LiveFrameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LiveFrameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LiveFrameResponse result;
      
      private LiveFrameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LiveFrameResponse original = result;
          result = new LiveFrameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LiveFrameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::C2BNet.LiveFrameResponse.Descriptor; }
      }
      
      public override LiveFrameResponse DefaultInstanceForType {
        get { return global::C2BNet.LiveFrameResponse.DefaultInstance; }
      }
      
      public override LiveFrameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LiveFrameResponse) {
          return MergeFrom((LiveFrameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LiveFrameResponse other) {
        if (other == global::C2BNet.LiveFrameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.liveFrames_.Count != 0) {
          result.liveFrames_.Add(other.liveFrames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_liveFrameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _liveFrameResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.liveFrames_, global::C2BNet.RepairFrame.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::C2BNet.RepairFrame> LiveFramesList {
        get { return PrepareBuilder().liveFrames_; }
      }
      public int LiveFramesCount {
        get { return result.LiveFramesCount; }
      }
      public global::C2BNet.RepairFrame GetLiveFrames(int index) {
        return result.GetLiveFrames(index);
      }
      public Builder SetLiveFrames(int index, global::C2BNet.RepairFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.liveFrames_[index] = value;
        return this;
      }
      public Builder SetLiveFrames(int index, global::C2BNet.RepairFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.liveFrames_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLiveFrames(global::C2BNet.RepairFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.liveFrames_.Add(value);
        return this;
      }
      public Builder AddLiveFrames(global::C2BNet.RepairFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.liveFrames_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLiveFrames(scg::IEnumerable<global::C2BNet.RepairFrame> values) {
        PrepareBuilder();
        result.liveFrames_.Add(values);
        return this;
      }
      public Builder ClearLiveFrames() {
        PrepareBuilder();
        result.liveFrames_.Clear();
        return this;
      }
    }
    static LiveFrameResponse() {
      object.ReferenceEquals(global::C2BNet.Proto.C2BNetMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
